# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: "dotnet test"

on:
  workflow_dispatch:
    inputs:
      dotnetAppPath:
        description: "Folder of the .NET app"
        type: string
        required: true

run-name: .NET Run Tests - ${{ github.ref }} - ${{ inputs.dotnetAppPath }}

jobs:
  Run-Tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Run Test
        run: dotnet test --logger trx --collect:"XPlat Code Coverage" --results-directory TestResults
        working-directory: ${{ inputs.dotnetAppPath }}

      - name: Combine Coverage Reports # combine reports per produced projects
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: "**/*.cobertura.xml"
          targetdir: ${{ inputs.dotnetAppPath }}/TestResults
          sourcedirs: ${{ inputs.dotnetAppPath }}/**/
          reporttypes: "HtmlInline;Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info"
          title: "Code Coverage"
          tag: "${{ github.run_number }}_${{ github.run_id }}"
          customSettings: ""
          toolpath: "reportgeneratortool"

      # - name: Upload Combined Coverage XML
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage
      #     path: ${{ inputs.dotnetAppPath }}/TestResults/Cobertura.xml
      #     retention-days: 5

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: ${{ inputs.dotnetAppPath }}/TestResults
          retention-days: 5
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
        if: always()
        with:
          trx_files: "${{ inputs.dotnetAppPath }}/TestResults/**/*.trx"
