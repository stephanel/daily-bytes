// <auto-generated />
using Books.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Books.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    partial class BooksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Books.Infrastructure.Persistence.Models.BookDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_books_title");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Books.Infrastructure.Persistence.Models.BookDb", b =>
                {
                    b.OwnsOne("Books.Infrastructure.Persistence.Models.BookDb+BookPayload", "Payload", b1 =>
                        {
                            b1.Property<long>("BookDbId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ISBN")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ThumbnailUrl")
                                .HasColumnType("text");

                            b1.HasKey("BookDbId");

                            b1.ToTable("Books");

                            b1.ToJson("payload");

                            b1.WithOwner()
                                .HasForeignKey("BookDbId")
                                .HasConstraintName("fk_books_books_id");

                            b1.OwnsMany("Books.Infrastructure.Persistence.Models.AuthorDb", "Authors", b2 =>
                                {
                                    b2.Property<long>("BookPayloadBookDbId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("KnownFor")
                                        .HasColumnType("text");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("BookPayloadBookDbId", "Id");

                                    b2.ToTable("Books");

                                    b2.ToJson("payload");

                                    b2.WithOwner()
                                        .HasForeignKey("BookPayloadBookDbId")
                                        .HasConstraintName("fk_books_books_book_payload_book_db_id");
                                });

                            b1.Navigation("Authors");
                        });

                    b.Navigation("Payload");
                });
#pragma warning restore 612, 618
        }
    }
}
